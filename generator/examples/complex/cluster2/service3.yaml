apiVersion: v1
kind: ConfigMap
metadata:
    name: config-service3
    labels:
        name: config-service3
        version: cluster2
    namespace: namespace2
data:
    conf.json: '{"processes":1,"logging":false,"endpoints":[{"name":"end1","protocol":"http","execution_mode":"sequential","cpu_complexity":{"execution_time":0.001,"threads":1},"network_complexity":{"forward_requests":"asynchronous","response_payload_size":512,"called_services":[{"service":"service4","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service5","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service6","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service7","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service8","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service9","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service10","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256}]}},{"name":"end2","protocol":"http","execution_mode":"sequential","cpu_complexity":{"execution_time":0.001,"threads":1},"network_complexity":{"forward_requests":"asynchronous","response_payload_size":512,"called_services":[{"service":"service4","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service5","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service6","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service7","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256}]}},{"name":"end3","protocol":"http","execution_mode":"sequential","cpu_complexity":{"execution_time":0.001,"threads":1},"network_complexity":{"forward_requests":"asynchronous","response_payload_size":512,"called_services":[{"service":"service4","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service5","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256},{"service":"service6","port":80,"endpoint":"end1","protocol":"http","traffic_forward_ratio":1,"request_payload_size":256}]}}]}'
    service.proto: "syntax = \"proto3\";\n\n\nservice service1 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service2 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service3 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n    rpc end2 (Request) returns (Response) {}\n    \n    rpc end3 (Request) returns (Response) {}\n    \n}\n\nservice service4 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n    rpc end2 (Request) returns (Response) {}\n    \n    rpc end3 (Request) returns (Response) {}\n    \n}\n\nservice service5 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service6 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service7 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service8 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service9 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n}\n\nservice service10 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n    rpc end2 (Request) returns (Response) {}\n    \n    rpc end3 (Request) returns (Response) {}\n    \n}\n\nservice service11 {\n    \n    rpc end1 (Request) returns (Response) {}\n    \n    rpc end2 (Request) returns (Response) {}\n    \n    rpc end3 (Request) returns (Response) {}\n    \n}\n\n\nmessage Request {\n    string data = 1;\n}\n\nmessage Response {\n    string data = 1;\n}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: service3
    namespace: namespace2
    labels:
        version: cluster2
spec:
    selector:
        matchLabels:
            app: service3
            version: cluster2
    replicas: 1
    template:
        metadata:
            labels:
                app: service3
                version: cluster2
            annotations: {}
        spec:
            containers:
                - name: app
                  image: app-demo:latest
                  imagePullPolicy: Never
                  env:
                    - name: SERVICE_NAME
                      value: service3
                  ports:
                    - containerPort: 5000
                  volumeMounts:
                    - mountPath: /usr/src/app/config
                      name: config-data-volume
                  readinessProbe:
                    httpGet:
                        path: /
                        port: 5000
                    initialDelaySeconds: 2
                    periodSeconds: 1
                  resources:
                    limits:
                        cpu: 1000m
                        memory: 1024M
                    requests:
                        cpu: 500m
                        memory: 256M
            volumes:
                - name: config-data-volume
                  configMap:
                    name: config-service3
---
apiVersion: v1
kind: Service
metadata:
    name: service3
    namespace: namespace2
    labels:
        version: cluster2
    annotations:
        http: /
spec:
    selector:
        app: service3
    ports:
        - name: http
          port: 80
          targetPort: 5000
