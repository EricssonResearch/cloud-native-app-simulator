from pathlib import Path
import sys
path = str(Path(Path(__file__).parent.absolute()).parent.absolute())
sys.path.insert(0, path)
from concurrent import futures
import grpc
import time
import os
from common import service_pb2
from common import service_pb2_grpc
from grpc_reflection.v1alpha import reflection
from grpc_health.v1 import health_pb2
from grpc_health.v1 import health_pb2_grpc


class Req_Res(service_pb2_grpc.{{ service_name }}Servicer):
    {% for endpoint in endpoints %}
    def {{ endpoint['name'] }}(self, request, context):
        return service_pb2.Response(data='Hi, {{ endpoint['name'] }} %s!' % request.data)
    {% endfor %}
    def Check(self, request, context):
        return health_pb2.HealthCheckResponse(status=health_pb2.HealthCheckResponse.SERVING)

    def Watch(self, request, context):
        return health_pb2.HealthCheckResponse(status=health_pb2.HealthCheckResponse.UNIMPLEMENTED)



server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
service_pb2_grpc.add_{{ service_name }}Servicer_to_server(Req_Res(), server)
health_pb2_grpc.add_HealthServicer_to_server(Req_Res(), server)
server.add_insecure_port('[::]:'+'5000')
server.start()
SERVICE_NAMES = (
    service_pb2.DESCRIPTOR.services_by_name['{{ service_name }}'].full_name,
    reflection.SERVICE_NAME,
)
reflection.enable_server_reflection(SERVICE_NAMES, server)
try:
    while True:
        time.sleep(10000)
except KeyboardInterrupt:
    server.stop(0)


